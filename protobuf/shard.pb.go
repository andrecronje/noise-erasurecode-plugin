// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shard.proto

package erasurecode

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Shard struct {
	FileSignature        []byte   `protobuf:"bytes,1,opt,name=file_signature,json=fileSignature,proto3" json:"file_signature,omitempty"`
	ShardData            []byte   `protobuf:"bytes,2,opt,name=shard_data,json=shardData,proto3" json:"shard_data,omitempty"`
	ShardNumber          uint64   `protobuf:"varint,3,opt,name=shard_number,json=shardNumber,proto3" json:"shard_number,omitempty"`
	TotalShards          uint64   `protobuf:"varint,4,opt,name=total_shards,json=totalShards,proto3" json:"total_shards,omitempty"`
	MinimumNeededShards  uint64   `protobuf:"varint,5,opt,name=minimum_needed_shards,json=minimumNeededShards,proto3" json:"minimum_needed_shards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Shard) Reset()      { *m = Shard{} }
func (*Shard) ProtoMessage() {}
func (*Shard) Descriptor() ([]byte, []int) {
	return fileDescriptor_shard_30809cd2727ad2cf, []int{0}
}
func (m *Shard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Shard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Shard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Shard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Shard.Merge(dst, src)
}
func (m *Shard) XXX_Size() int {
	return m.Size()
}
func (m *Shard) XXX_DiscardUnknown() {
	xxx_messageInfo_Shard.DiscardUnknown(m)
}

var xxx_messageInfo_Shard proto.InternalMessageInfo

func (m *Shard) GetFileSignature() []byte {
	if m != nil {
		return m.FileSignature
	}
	return nil
}

func (m *Shard) GetShardData() []byte {
	if m != nil {
		return m.ShardData
	}
	return nil
}

func (m *Shard) GetShardNumber() uint64 {
	if m != nil {
		return m.ShardNumber
	}
	return 0
}

func (m *Shard) GetTotalShards() uint64 {
	if m != nil {
		return m.TotalShards
	}
	return 0
}

func (m *Shard) GetMinimumNeededShards() uint64 {
	if m != nil {
		return m.MinimumNeededShards
	}
	return 0
}

func init() {
	proto.RegisterType((*Shard)(nil), "erasurecode.Shard")
}
func (this *Shard) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Shard)
	if !ok {
		that2, ok := that.(Shard)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Shard")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Shard but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Shard but is not nil && this == nil")
	}
	if !bytes.Equal(this.FileSignature, that1.FileSignature) {
		return fmt.Errorf("FileSignature this(%v) Not Equal that(%v)", this.FileSignature, that1.FileSignature)
	}
	if !bytes.Equal(this.ShardData, that1.ShardData) {
		return fmt.Errorf("ShardData this(%v) Not Equal that(%v)", this.ShardData, that1.ShardData)
	}
	if this.ShardNumber != that1.ShardNumber {
		return fmt.Errorf("ShardNumber this(%v) Not Equal that(%v)", this.ShardNumber, that1.ShardNumber)
	}
	if this.TotalShards != that1.TotalShards {
		return fmt.Errorf("TotalShards this(%v) Not Equal that(%v)", this.TotalShards, that1.TotalShards)
	}
	if this.MinimumNeededShards != that1.MinimumNeededShards {
		return fmt.Errorf("MinimumNeededShards this(%v) Not Equal that(%v)", this.MinimumNeededShards, that1.MinimumNeededShards)
	}
	return nil
}
func (this *Shard) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Shard)
	if !ok {
		that2, ok := that.(Shard)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.FileSignature, that1.FileSignature) {
		return false
	}
	if !bytes.Equal(this.ShardData, that1.ShardData) {
		return false
	}
	if this.ShardNumber != that1.ShardNumber {
		return false
	}
	if this.TotalShards != that1.TotalShards {
		return false
	}
	if this.MinimumNeededShards != that1.MinimumNeededShards {
		return false
	}
	return true
}
func (this *Shard) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&erasurecode.Shard{")
	s = append(s, "FileSignature: "+fmt.Sprintf("%#v", this.FileSignature)+",\n")
	s = append(s, "ShardData: "+fmt.Sprintf("%#v", this.ShardData)+",\n")
	s = append(s, "ShardNumber: "+fmt.Sprintf("%#v", this.ShardNumber)+",\n")
	s = append(s, "TotalShards: "+fmt.Sprintf("%#v", this.TotalShards)+",\n")
	s = append(s, "MinimumNeededShards: "+fmt.Sprintf("%#v", this.MinimumNeededShards)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringShard(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Shard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileSignature) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.FileSignature)))
		i += copy(dAtA[i:], m.FileSignature)
	}
	if len(m.ShardData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShard(dAtA, i, uint64(len(m.ShardData)))
		i += copy(dAtA[i:], m.ShardData)
	}
	if m.ShardNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.ShardNumber))
	}
	if m.TotalShards != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.TotalShards))
	}
	if m.MinimumNeededShards != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintShard(dAtA, i, uint64(m.MinimumNeededShards))
	}
	return i, nil
}

func encodeVarintShard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedShard(r randyShard, easy bool) *Shard {
	this := &Shard{}
	v1 := r.Intn(100)
	this.FileSignature = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.FileSignature[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.ShardData = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.ShardData[i] = byte(r.Intn(256))
	}
	this.ShardNumber = uint64(uint64(r.Uint32()))
	this.TotalShards = uint64(uint64(r.Uint32()))
	this.MinimumNeededShards = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyShard interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneShard(r randyShard) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringShard(r randyShard) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneShard(r)
	}
	return string(tmps)
}
func randUnrecognizedShard(r randyShard, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldShard(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldShard(dAtA []byte, r randyShard, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateShard(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateShard(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateShard(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateShard(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateShard(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateShard(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateShard(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Shard) Size() (n int) {
	var l int
	_ = l
	l = len(m.FileSignature)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	l = len(m.ShardData)
	if l > 0 {
		n += 1 + l + sovShard(uint64(l))
	}
	if m.ShardNumber != 0 {
		n += 1 + sovShard(uint64(m.ShardNumber))
	}
	if m.TotalShards != 0 {
		n += 1 + sovShard(uint64(m.TotalShards))
	}
	if m.MinimumNeededShards != 0 {
		n += 1 + sovShard(uint64(m.MinimumNeededShards))
	}
	return n
}

func sovShard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShard(x uint64) (n int) {
	return sovShard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Shard) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Shard{`,
		`FileSignature:` + fmt.Sprintf("%v", this.FileSignature) + `,`,
		`ShardData:` + fmt.Sprintf("%v", this.ShardData) + `,`,
		`ShardNumber:` + fmt.Sprintf("%v", this.ShardNumber) + `,`,
		`TotalShards:` + fmt.Sprintf("%v", this.TotalShards) + `,`,
		`MinimumNeededShards:` + fmt.Sprintf("%v", this.MinimumNeededShards) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringShard(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileSignature = append(m.FileSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.FileSignature == nil {
				m.FileSignature = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShard
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardData = append(m.ShardData[:0], dAtA[iNdEx:postIndex]...)
			if m.ShardData == nil {
				m.ShardData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNumber", wireType)
			}
			m.ShardNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShards", wireType)
			}
			m.TotalShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalShards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumNeededShards", wireType)
			}
			m.MinimumNeededShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumNeededShards |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShard   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shard.proto", fileDescriptor_shard_30809cd2727ad2cf) }

var fileDescriptor_shard_30809cd2727ad2cf = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0x4f, 0x4a, 0x03, 0x31,
	0x14, 0xc6, 0xfb, 0xb4, 0x15, 0x4c, 0xab, 0x8b, 0x88, 0x30, 0x08, 0x3e, 0x6a, 0x41, 0xe8, 0x42,
	0x2c, 0xe8, 0x0d, 0xc4, 0x75, 0x17, 0xed, 0x01, 0x86, 0x8c, 0x79, 0x1d, 0x07, 0x3a, 0x13, 0xc9,
	0x9f, 0xbd, 0x47, 0xf0, 0x18, 0x1e, 0xc1, 0x1b, 0xe8, 0xd2, 0xa5, 0xcb, 0x4e, 0xbc, 0x80, 0x4b,
	0x97, 0x32, 0x2f, 0xce, 0x2e, 0xef, 0xf7, 0xfd, 0x5e, 0xf2, 0x45, 0x8c, 0xdd, 0xa3, 0xb2, 0xfa,
	0xfa, 0xc9, 0x1a, 0x6f, 0xe4, 0x98, 0xac, 0x72, 0xc1, 0xd2, 0x83, 0xd1, 0x74, 0x36, 0x2b, 0x4d,
	0x69, 0x16, 0x1c, 0x14, 0x61, 0xb3, 0xe8, 0x26, 0x1e, 0xf8, 0x94, 0x16, 0x66, 0xef, 0x20, 0x46,
	0xeb, 0xee, 0x02, 0x79, 0x29, 0x8e, 0x37, 0xd5, 0x96, 0x72, 0x57, 0x95, 0x8d, 0xf2, 0xc1, 0x52,
	0x06, 0x53, 0x98, 0x4f, 0x56, 0x47, 0x1d, 0x5d, 0xf7, 0x50, 0x9e, 0x0b, 0xc1, 0x0f, 0xe6, 0x5a,
	0x79, 0x95, 0xed, 0xb1, 0x72, 0xc8, 0xe4, 0x5e, 0x79, 0x25, 0x2f, 0xc4, 0x24, 0xc5, 0x4d, 0xa8,
	0x0b, 0xb2, 0xd9, 0xfe, 0x14, 0xe6, 0xc3, 0x55, 0xea, 0xb8, 0x64, 0xd4, 0x29, 0xde, 0x78, 0xb5,
	0xcd, 0x19, 0xba, 0x6c, 0x98, 0x14, 0x66, 0x5c, 0xc5, 0xc9, 0x1b, 0x71, 0x5a, 0x57, 0x4d, 0x55,
	0x87, 0x3a, 0x6f, 0x88, 0x34, 0xe9, 0xde, 0x1d, 0xb1, 0x7b, 0xf2, 0x1f, 0x2e, 0x39, 0x4b, 0x3b,
	0x77, 0x57, 0x5f, 0x2d, 0x0e, 0x76, 0x2d, 0xc2, 0x4f, 0x8b, 0xf0, 0xdb, 0x22, 0x3c, 0x47, 0x84,
	0xd7, 0x88, 0xf0, 0x16, 0x11, 0x3e, 0x22, 0xc2, 0x67, 0x44, 0xd8, 0x45, 0x84, 0x97, 0x6f, 0x1c,
	0x14, 0x07, 0xfc, 0xfd, 0xdb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0xcd, 0x35, 0x97, 0x3e,
	0x01, 0x00, 0x00,
}
